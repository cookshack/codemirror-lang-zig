# Top level const

const a;

==>
Program(Decl(GlobalVarDecl(VarDeclProto(const, Name))))

# Top level vars

const a;
var b;
threadlocal var c : u32;
const d : string;

==>
Program(Decl(GlobalVarDecl(VarDeclProto(const, Name))),
        Decl(GlobalVarDecl(VarDeclProto(var, Name))),
        Decl(threadlocal, GlobalVarDecl(VarDeclProto(var, Name, TypeExpr(Identifier)))),
        Decl(GlobalVarDecl(VarDeclProto(const, Name, TypeExpr(Identifier)))))

# Type

const a : u32;

==>
Program(Decl(GlobalVarDecl(VarDeclProto(const,
                                        Name,
                                        TypeExpr(Identifier)))))

# Type and val

const a : u32 = 0;

==>
Program(Decl(GlobalVarDecl(VarDeclProto(const,
                                        Name,
                                        TypeExpr(Identifier)),
                           Expr(TypeExpr(Integer)))))

# export

export var a : u32 = 0;

==>
Program(Decl(export,
             GlobalVarDecl(VarDeclProto(var,
                                        Name,
                                        TypeExpr(Identifier)),
                           Expr(TypeExpr(Integer)))))

# extern

extern "c" var x : u32;

==>
Program(Decl(extern,
             StringLiteralSingle,
             GlobalVarDecl(VarDeclProto(var,
                                        Name,
                                        TypeExpr(Identifier)))))

# specifiers

var bytes align(2) addrspace(something) linksection(".text") = [_]u8{ 1, 2, 3, 4, 5, 6 };

==>
Program(Decl(GlobalVarDecl(VarDeclProto(var,
                                        Name,
                                        ByteAlign(align,
                                                  Expr(TypeExpr(Integer))),
                                        AddrSpace(addrspace,
                                                  Expr(TypeExpr(Identifier))),
                                        LinkSection(linksection,
                                                    Expr(TypeExpr(StringLiteral)))),
                           Expr(TypeExpr(PrefixTypeOp(ArrayTypeStart(Expr(TypeExpr(Identifier)))),
                                         Identifier),
                                InitList(Expr(TypeExpr(Integer)),
                                         Expr(TypeExpr(Integer)),
                                         Expr(TypeExpr(Integer)),
                                         Expr(TypeExpr(Integer)),
                                         Expr(TypeExpr(Integer)),
                                         Expr(TypeExpr(Integer)))))))
