# Decl

var a : u8;
comptime { a = 1; }

==>
Program(Decl(VarDecl(var,Name,TypeExpr(Identifier))),
        ComptimeDecl(comptime,
                     Block(Statement(TypeExpr(Identifier),
                                     AssignOp,
                                     Expr(TypeExpr(Integer))))))

# Valid

test "comptime" {
  const f3 = comptime blk: {
    break :blk fib(3);
  };
  //try std.testing.expect(f3 > 0);
}

==>
Program
(TestDecl
 (test,
  TestName,
  Block(Statement(VarDecl(const,
                          Name,
                          Expr(comptime,
                               Expr(TypeExpr
                                    (LabeledTypeExpr(BlockLabel(Identifier),
                                                     Block(Statement(break,
                                                                     BreakLabel(Identifier),
                                                                     Expr(TypeExpr(Identifier,
                                                                                   FnCallArgs
                                                                                   (Expr
                                                                                    (TypeExpr
                                                                                     (Integer))))))))))))),
        LineComment)))

# type expr

comptime comptime a = 0,

var a : comptime u32;

==>
Program(ContainerField(TypeExpr(comptime,
                                TypeExpr(comptime,
                                         TypeExpr(Identifier))),
                       Expr(TypeExpr(Integer))),
        Decl(VarDecl(var,
                     Name,
                     TypeExpr(comptime,
                              TypeExpr(Identifier)))))

# statement

fn f() noreturn {
 comptime a = a + 1;
}

==>
Program(Decl(FnProto(fn,
                     Identifier,
                     ParamDeclList,
                     TypeExpr(Identifier)),
             Block(Statement(comptime,
                             BlockExprStatement(AssignExpr(Expr(TypeExpr(Identifier)),
                                                           AssignOp,
                                                           Expr(BinaryExpr(Expr(TypeExpr(Identifier)),
                                                                           AdditionOp,
                                                                           Expr(TypeExpr(Integer))))))))))
