# defer

fn fun() noreturn {
  var a = alloc();
  defer free();
}

==>
Program(Decl(FnProto(fn,
                     Identifier,
                     ParamDeclList,
                     TypeExpr(Identifier)),
             Block(Statement(VarDecl(var,
                                     Name,
                                     Expr(TypeExpr(Identifier,
                                                   FnCallArgs)))),
                   Statement(defer,
                             BlockExprStatement(Expr(TypeExpr(Identifier,
                                                              FnCallArgs)))))))

# errdefer

fn fun() u32 {
  var a = alloc();
  defer free();
  errdefer exit();
  if (a)
    return 0;
  return error.OutOfPie;
}

==>
Program(Decl(FnProto(fn,
                     Identifier,
                     ParamDeclList,
                     TypeExpr(Identifier)),
             Block(Statement(VarDecl(var,
                                     Name,
                                     Expr(TypeExpr(Identifier,
                                                   FnCallArgs)))),
                   Statement(defer,
                             BlockExprStatement(Expr(TypeExpr(Identifier,
                                                              FnCallArgs)))),
                   Statement(errdefer,
                             BlockExprStatement(Expr(TypeExpr(Identifier,
                                                              FnCallArgs)))),
                   Statement(Expr(IfExpr(IfPrefix(if,
                                                  Expr(TypeExpr(Identifier))),
                                         Expr(return,
                                              Expr(TypeExpr(Integer)))))),
                   Statement(Expr(return,
                                  Expr(TypeExpr(error, Identifier)))))))
