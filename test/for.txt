# For

fn main() noreturn {
  for (s) |ch|
    fun(ch);
}

==>
Program
(Decl
 (FnProto(Identifier,ParamDeclList,TypeExpr(Identifier)),
  Block(Statement(LoopStatement(ForStatement(ForPrefix(For,
                                                       ForArgList(ForItem(Expr(PrimaryExpr(TypeExpr(Identifier))))),
                                                       PtrListPayload(Identifier)),
                                             Expr(PrimaryExpr(TypeExpr(Identifier,
                                                                       FnCallArgs(Expr(PrimaryExpr(TypeExpr(Identifier)))))))))))))

# block

fn one() u8 {
  inline for (s, 0..3) |ch, index| {
    return 1;
  }
}

==>
Program(Decl(FnProto(Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(LoopStatement(Inline,
                                           ForStatement(ForPrefix(For,
                                                                  ForArgList(ForItem(Expr(PrimaryExpr(TypeExpr(Identifier)))),
                                                                             ForItem(Expr(PrimaryExpr(TypeExpr(Integer))),
                                                                                     Expr(PrimaryExpr(TypeExpr(Integer))))),
                                                                  PtrListPayload(Identifier, Identifier)),
                                                        Block(Statement(Return, Expr(PrimaryExpr(TypeExpr(Integer)))))))))))

# assign

fn main() noreturn {
  for (s, 0..) |ch|
    a = ch;
}

==>
Program(Decl(FnProto(Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(LoopStatement(ForStatement(ForPrefix(For,
                                                                  ForArgList(ForItem(Expr(PrimaryExpr(TypeExpr(Identifier)))),
                                                                             ForItem(Expr(PrimaryExpr(TypeExpr(Integer))))),
                                                                  PtrListPayload(Identifier)),
                                                        AssignExpr(Expr(PrimaryExpr(TypeExpr(Identifier))),
                                                                   AssignOp,
                                                                   Expr(PrimaryExpr(TypeExpr(Identifier))))))))))

# else

fn main() i32 {
  for (s, 0..) |ch| {
  }
  else
    return 0;
}

==>
Program(Decl(FnProto(Identifier,
                     ParamDeclList,
                     TypeExpr(Identifier)),
             Block(Statement(LoopStatement(ForStatement(ForPrefix(For,
                                                                  ForArgList(ForItem(Expr(PrimaryExpr(TypeExpr(Identifier)))),
                                                                             ForItem(Expr(PrimaryExpr(TypeExpr(Integer))))),
                                                                  PtrListPayload(Identifier)),
                                                        Block,
                                                        Else,
                                                        Statement(Return,
                                                                  Expr(PrimaryExpr(TypeExpr(Integer))))))))))

# expr

fn fun() i32 {
  return inline for (a) |val| {
    sum += val;
  }
  else
    sum;
}

==>
Program(Decl(FnProto(Identifier,
                     ParamDeclList,
                     TypeExpr(Identifier)),
             Block(Statement(Return,
                             Expr(PrimaryExpr(LoopExpr(Inline,
                                                       ForExpr(ForPrefix(For,
                                                                         ForArgList(ForItem(Expr(PrimaryExpr(TypeExpr(Identifier))))),
                                                                         PtrListPayload(Identifier)),
                                                               Expr(PrimaryExpr(Block(Statement(TypeExpr(Identifier),
                                                                                                AssignOp,
                                                                                                Expr(PrimaryExpr(TypeExpr(Identifier))))))),
                                                               Else,
                                                               Expr(PrimaryExpr(TypeExpr(Identifier)))))))))))
