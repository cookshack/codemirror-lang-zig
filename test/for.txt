# exp

fn main() noreturn {
  for (s) |ch|
    fun(ch);
}

==>
Program
(Decl
 (FnProto(fn,Identifier,ParamDeclList,TypeExpr(Identifier)),
  Block(Statement(Expr(LoopExpr(ForExpr(ForPrefix(for,
                                                  ForArgList(ForItem(Expr(TypeExpr(Identifier)))),
                                                  PtrListPayload(Identifier)),
                                        Expr(TypeExpr(Identifier,
                                                      FnCallArgs(Expr(TypeExpr(Identifier))))))))))))

# block

fn one() u8 {
  inline for (s, 0..3) |ch, index| {
    return 1;
  }
}

==>
Program(Decl(FnProto(fn,Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(LoopStatement(inline,
                                           ForStatement(ForPrefix(for,
                                                                  ForArgList(ForItem(Expr(TypeExpr(Identifier))),
                                                                             ForItem(Expr(TypeExpr(Integer)),
                                                                                     Expr(TypeExpr(Integer)))),
                                                                  PtrListPayload(Identifier, Identifier)),
                                                        Block(Statement(Expr(return, Expr(TypeExpr(Integer)))))))))))

# assign

fn main() noreturn {
  for (s, 0..) |ch|
    a = ch;
}

==>
Program(Decl(FnProto(fn,Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(LoopStatement(ForStatement(ForPrefix(for,
                                                                  ForArgList(ForItem(Expr(TypeExpr(Identifier))),
                                                                             ForItem(Expr(TypeExpr(Integer)))),
                                                                  PtrListPayload(Identifier)),
                                                        AssignExpr(Expr(TypeExpr(Identifier)),
                                                                   AssignOp,
                                                                   Expr(TypeExpr(Identifier)))))))))

# else

fn main() i32 {
  for (s, 0..) |ch| {
  }
  else
    return 0;
}

==>
Program(Decl(FnProto(fn,
                     Identifier,
                     ParamDeclList,
                     TypeExpr(Identifier)),
             Block(Statement(LoopStatement(ForStatement(ForPrefix(for,
                                                                  ForArgList(ForItem(Expr(TypeExpr(Identifier))),
                                                                             ForItem(Expr(TypeExpr(Integer)))),
                                                                  PtrListPayload(Identifier)),
                                                        Block,
                                                        else,
                                                        Statement(Expr(return,
                                                                       Expr(TypeExpr(Integer))))))))))

# expr

fn fun() i32 {
  return inline for (a) |val| {
    sum += val;
  }
  else
    sum;
}

==>
Program(Decl(FnProto(fn
                     Identifier,
                     ParamDeclList,
                     TypeExpr(Identifier)),
             Block(Statement(Expr(return,
                                  Expr(LoopExpr(inline,
                                                ForExpr(ForPrefix(for,
                                                                  ForArgList(ForItem(Expr(TypeExpr(Identifier)))),
                                                                  PtrListPayload(Identifier)),
                                                        Expr(Block(Statement(AssignExpr(Expr(TypeExpr(Identifier)),
                                                                                        AssignOp,
                                                                                        Expr(TypeExpr(Identifier)))))),
                                                        else,
                                                        Expr(TypeExpr(Identifier))))))))))
