# Empty doc

==>
Program()

# Line comment

// eg

==>
Program(LineComment())

# Block comment

/* eg
line 2
 */

==>
Program(BlockComment())

# One fn proto

fn one();

==>
Program(Decl(FnProto(Identifier,ParamDeclList)))

# One fn proto w arg

fn one(a : u32);

==>
Program(Decl(FnProto(Identifier,ParamDeclList(ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier))))))))

# Two fn protos

fn one(a : u32, b: string);
fn two(a : u32, b: string);

==>
Program(Decl(FnProto(Identifier,ParamDeclList(ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier)))),
                                              ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier))))))),
        Decl(FnProto(Identifier,ParamDeclList(ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier)))),
                                              ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier))))))))

# Two fns

fn one(a : u32, b: string) { }
fn two(a : u32, b: string) { }

==>
Program(Decl(FnProto(Identifier,ParamDeclList(ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier)))),
                                              ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier)))))),
             Block),
        Decl(FnProto(Identifier,ParamDeclList(ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier)))),
                                              ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier)))))),
             Block))

# Top level const

const a;

==>
Program(Decl(VarDecl(Const, Name)))

# Top level vars

const a;
var b;
var c : u32;
const d : string;

==>
Program(Decl(VarDecl(Const, Name)),
        Decl(VarDecl(Var, Name)),
        Decl(VarDecl(Var, Name, TypeExpr(PrimaryTypeExpr(Identifier)))),
        Decl(VarDecl(Const, Name, TypeExpr(PrimaryTypeExpr(Identifier)))))

# Block statement

fn one() {
  return;
}

==>
Program(Decl(FnProto(Identifier,ParamDeclList()),
             Block(Statement(Expr(PrimaryExpr(Return))))))

# If

fn one(a : u32) {
  if (a == 1)
    return 1;
}

==>
Program(Decl(FnProto(Identifier,ParamDeclList(ParamDecl(Identifier, ParamType(TypeExpr(PrimaryTypeExpr(Identifier)))))),
             Block(Statement(IfStatement(IfPrefix(If, Expr(BinaryExpr(Expr(PrimaryExpr(CurlySuffixExpr(TypeExpr(PrimaryTypeExpr(Identifier))))),
                                                                      CompareOp,
                                                                      Expr(PrimaryExpr(CurlySuffixExpr(TypeExpr(PrimaryTypeExpr(Integer)))))))),
                                         Expr(PrimaryExpr(Return, Expr(PrimaryExpr(CurlySuffixExpr(TypeExpr(PrimaryTypeExpr(Integer))))))))))))
