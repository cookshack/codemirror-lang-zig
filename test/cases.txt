# Empty doc

==>
Program()

# Block statement

fn one() noreturn {
  return;
}

==>
Program(Decl(FnProto(fn,Identifier,ParamDeclList(),TypeExpr(Identifier)),
             Block(Statement(Expr(return)))))

# Assign in block

fn one() noreturn {
  a = 1;
}

==>
Program(Decl(FnProto(fn,Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(AssignExpr(Expr(TypeExpr(Identifier)),
                                        AssignOp,
                                        Expr(TypeExpr(Integer)))))))

# import

const std = @import("std");

==>
Program
(Decl
 (VarDecl
  (const,
   Name,
   Expr(TypeExpr(BuiltinIdentifier, FnCallArgs(Expr(TypeExpr(StringLiteral))))))))

# unreachable statement

fn fun() noreturn {
  if (0) {
    unreachable;
  }
}

==>
Program(Decl(FnProto(fn,
                     Identifier,
                     ParamDeclList,
                     TypeExpr(Identifier)),
             Block(Statement(IfStatement(IfPrefix(if,
                                                  Expr(TypeExpr(Integer))),
                                         Block(Statement(Expr(TypeExpr(unreachable)))))))))

# unreachable expr

fn fun() noreturn {
  if (0)
    unreachable;
}

==>
Program(Decl(FnProto(fn,
                     Identifier,
                     ParamDeclList,
                     TypeExpr(Identifier)),
             Block(Statement(Expr(IfExpr(IfPrefix(if,
                                                  Expr(TypeExpr(Integer))),
                                         Expr(TypeExpr(unreachable))))))))
