# open end

fn main () noreturn {
  return a[0..];
}

==>
Program(Decl(FnProto(fn,Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(Expr(return,
                                  Expr(TypeExpr(Identifier,
                                                SuffixOp(Slice(Expr(TypeExpr(Integer)))))))))))

# end

fn main () noreturn {
  return a[0..3];
}

==>
Program(Decl(FnProto(fn,Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(Expr(return,
                                  Expr(TypeExpr(Identifier,
                                                SuffixOp(Slice(Expr(TypeExpr(Integer)),
                                                               Expr(TypeExpr(Integer)))))))))))

# sentinel

fn fun () noreturn {
  return a[0..3:0];
}

==>
Program(Decl(FnProto(fn,Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(Expr(return,
                                  Expr(TypeExpr(Identifier,
                                                SuffixOp(Slice(Expr(TypeExpr(Integer)),
                                                               Expr(TypeExpr(Integer)),
                                                               Expr(TypeExpr(Integer)))))))))))

# type

var sl: [] align(8) addrspace(something) const volatile allowzero u32;

==>
Program(Decl(GlobalVarDecl(VarDeclProto(var,
                                        Name,
                                        TypeExpr(PrefixTypeOp(SliceTypeStart,
                                                              ByteAlign(align,
                                                                        Expr(TypeExpr(Integer))),
                                                              AddrSpace(addrspace,
                                                                        Expr(TypeExpr(Identifier))),
                                                              const,
                                                              volatile,
                                                              allowzero),
                                                Identifier)))))

# type sentinel

const sl: [:0]const u8 = "hi";

==>
Program(Decl(GlobalVarDecl(VarDeclProto(const,
                                        Name,
                                        TypeExpr(PrefixTypeOp(SliceTypeStart(Expr(TypeExpr(Integer))),
                                                              const),
                                                 Identifier)),
                           Expr(TypeExpr(StringLiteral)))))
