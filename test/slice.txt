# open end

fn main () noreturn {
  return a[0..];
}

==>
Program(Decl(FnProto(Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(Return,
                             Expr(PrimaryExpr(TypeExpr(Identifier,
                                                       SuffixOp(Slice(Expr(PrimaryExpr(TypeExpr(Integer))))))))))))

# end

fn main () noreturn {
  return a[0..3];
}

==>
Program(Decl(FnProto(Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(Return,
                             Expr(PrimaryExpr(TypeExpr(Identifier,
                                                       SuffixOp(Slice(Expr(PrimaryExpr(TypeExpr(Integer))),
                                                                      Expr(PrimaryExpr(TypeExpr(Integer))))))))))))

# sentinel

fn fun () noreturn {
  return a[0..3:0];
}

==>
Program(Decl(FnProto(Identifier,ParamDeclList,TypeExpr(Identifier)),
             Block(Statement(Return,
                             Expr(PrimaryExpr(TypeExpr(Identifier,
                                                       SuffixOp(Slice(Expr(PrimaryExpr(TypeExpr(Integer))),
                                                                      Expr(PrimaryExpr(TypeExpr(Integer))),
                                                                      Expr(PrimaryExpr(TypeExpr(Integer))))))))))))

# type

var sl: [] align(8) addrspace(something) const volatile allowzero u32;

==>
Program(Decl(VarDecl(Var,
                     Name,
                     TypeExpr(PrefixTypeOp(SliceTypeStart,
                                           ByteAlign(align,
                                                     Expr(PrimaryExpr(TypeExpr(Integer)))),
                                           AddrSpace(addrspace,
                                                     Expr(PrimaryExpr(TypeExpr(Identifier)))),
                                           Const,
                                           Volatile,
                                           allowzero),
                              Identifier))))

# type sentinel

const sl: [:0]const u8 = "hi";

==>
Program(Decl(VarDecl(Const,
                     Name,
                     TypeExpr(PrefixTypeOp(SliceTypeStart(Expr(PrimaryExpr(TypeExpr(Integer)))),
                                           Const),
                              Identifier),
                     Expr(PrimaryExpr(TypeExpr(StringLiteral))))))
