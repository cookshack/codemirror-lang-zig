@precedence {
  fncallargs @right
  statement @right
  curlyRight @right
  curlyLeft @left
  assign @right
  primary

  multiply @left
  add @left
  bitShift @left
  bitwise @left
  compare @left
  and @left
  or @left

  prefix

  else @right

  containerDecl @left

  // Prevent SR due to eg: a[0..break label:]
  colonSlice
  colonLabel
}

//// Templates.

list<x> { (x ",")* x? }

//// Root.

@top Program { ContainerDocComment? containerMembers }

containerMembers { containerDecl* !containerDecl (ContainerField ",")* (ContainerField | containerDecl*) }

containerDecl { TestDecl | ComptimeDecl | DocComment? kw<"pub">? Decl }

//// Top level.

ContainerDocComment { containerComment+ }

TestDecl { kw<"test"> TestName? Block }

TestName { stringLiteralSingle | identifier }

ComptimeDecl { kw<"comptime"> Block }

Decl {
  (kw<"export"> | (kw<"extern"> StringLiteralSingle?) | kw<"inline"> | kw<"noinline">)? FnProto (";" | Block)
  | (kw<"export"> | (kw<"extern"> StringLiteralSingle?))? kw<"threadlocal">? GlobalVarDecl
  | kw<"usingnamespace"> Expr ";"
}

FnProto { kw<"fn"> Identifier? "(" ParamDeclList ")" "!"? ByteAlign? TypeExpr }

VarDeclProto { ( kw<"const"> | kw<"var"> ) Name (":" TypeExpr)? }

GlobalVarDecl { VarDeclProto ("=" Expr)? ";" }

ContainerField {
  DocComment? (!curlyRight kw<"comptime">)? /*!KEYWORD_fn*/ (Identifier ":")? TypeExpr ByteAlign? ("=" Expr)?
}

Name { identifier }

//// Block level.

Statement {
  !statement kw<"comptime"> ComptimeStatement
  | !statement kw<"nosuspend"> BlockExprStatement
  | kw<"suspend"> BlockExprStatement
  | kw<"defer"> BlockExprStatement
  | kw<"errdefer"> Payload? BlockExprStatement
  | !statement IfStatement
  | !curlyRight labeledStatement
  | !curlyRight SwitchExpr
  //| (AssignExpr | Expr) ";"
  | varDeclExprStatement
}

ComptimeStatement { blockExpr | varDeclExprStatement }

IfStatement {
  !statement IfPrefix ( blockExpr (!else kw<"else"> Payload? Statement)?
                        | AssignExpr (";" | !else kw<"else"> Payload? Statement) )
}

labeledStatement { !curlyRight (Block | LoopStatement) }

LoopStatement { kw<"inline">? (ForStatement | WhileStatement) }

ForStatement {
  ForPrefix ( blockExpr (!else kw<"else"> Statement)?
              | (AssignExpr | Expr) (";" | !else kw<"else"> Statement) )
}

WhileStatement {
  WhilePrefix ( blockExpr (!else kw<"else"> Payload? Statement)?
                | AssignExpr (";" | !else kw<"else"> Payload? Statement) )
  // tree-sitter-zig:
  //            | (AssignExpr | Expr) (";" | !else kw<"else"> Payload? Statement) )
}

BlockExprStatement { blockExpr | (AssignExpr | Expr) ";" }

blockExpr { !curlyRight BlockLabel? !curlyRight Block }

// An expression, assignment, or any destructure, as a statement.
varDeclExprStatement {
  VarDeclProto ("," (VarDeclProto | Expr))* "=" Expr ";"
  | Expr (AssignOp Expr | ("," (VarDeclProto | Expr))+ "=" Expr)? ";"
}

//// Expression level.

// An assignment or a destructure whose LHS are all lvalue expressions.
AssignExpr { !assign Expr (!assign AssignOp Expr | (!assign "," Expr)+ !assign "=" Expr)? }

SingleAssignExpr { Expr (!assign AssignOp Expr)? }

Expr { BinaryExpr | PrefixExpr | !primary primaryExpr }

BinaryExpr {
  Expr !or kw<"or"> Expr
  | Expr !and kw<"and"> Expr
  | Expr !compare CompareOp Expr
  | Expr !bitwise BitwiseOp Expr
  | Expr !bitShift BitShiftOp Expr
  | Expr !add AdditionOp Expr
  | Expr !multiply MultiplyOp Expr
}

PrefixExpr { !prefix PrefixOp+ !primary primaryExpr }

primaryExpr {
  IfExpr
  | BlockLabel? LoopExpr
  | !primary primaryExprExclIf
}

primaryExprExclIf {
  AsmExpr
  | kw<"break"> BreakLabel? Expr?
  | !primary kw<"comptime"> Expr
  | !primary kw<"nosuspend"> Expr
  | kw<"continue"> BreakLabel?
  | kw<"resume"> Expr
  | kw<"return"> Expr?
  | Block
  | curlySuffixExpr
}

curlySuffixExpr { !curlyRight TypeExpr (!curlyRight InitList)? }

InitList {
  "{" FieldInit ("," FieldInit)* ","? "}"
  | "{" Expr ("," Expr)* ","? "}"
  | "{" "}"
}

IfExpr { !primary IfPrefix Expr (!else kw<"else"> Payload? Expr)? }

Block { "{" Statement* "}" }

LoopExpr {
  // this is for the inline in SwitchProng
  !curlyRight (kw<"inline"> (ForExpr | WhileExpr))
  | kw<"inline">? (ForExpr | WhileExpr) }

ForExpr { !primary ForPrefix Expr (!else kw<"else"> Expr)? }

WhileExpr { !primary WhilePrefix Expr (!else kw<"else"> Payload? Expr)? }

TypeExpr { PrefixTypeOp* (ErrorUnionExpr | suffixExpr) }

ErrorUnionExpr { suffixExpr !curlyRight "!" TypeExpr }

suffixExpr {
  kw<"async"> primaryTypeExpr SuffixOp* FnCallArgs
  | !assign primaryTypeExpr (SuffixOp | FnCallArgs)*
}

primaryTypeExpr {
  BuiltinIdentifier FnCallArgs
  | CharLiteral
  | ContainerDecl
  | "." Identifier
  | "." InitList
  | ErrorSetDecl
  | Float
  | FnProto
  | GroupedExpr
  | LabeledTypeExpr
  | Identifier
  | IfTypeExpr
  | Integer
  | !primary kw<"comptime"> TypeExpr
  | kw<"error"> "." Identifier
  | kw<"anyframe">
  | kw<"unreachable">
  | StringLiteral
  | SwitchExpr
}

ContainerDecl { ( kw<"extern"> | kw<"packed"> )? ContainerDeclAuto }

ErrorSetDecl { kw<"error"> "{" list<DocComment? Identifier> "}" }

GroupedExpr { "(" Expr ")" }

IfTypeExpr { IfPrefix TypeExpr (!else kw<"else"> Payload? TypeExpr)? }

LabeledTypeExpr { BlockLabel Block | BlockLabel? LoopTypeExpr }

LoopTypeExpr {
  // this is for the inline in SwitchProng
  !curlyRight (kw<"inline"> (ForTypeExpr | WhileTypeExpr))
  | kw<"inline">? (ForTypeExpr | WhileTypeExpr)
}

ForTypeExpr { ForPrefix TypeExpr (!else kw<"else"> TypeExpr)? }

WhileTypeExpr { WhilePrefix TypeExpr (!else kw<"else"> Payload? TypeExpr)? }

SwitchExpr { kw<"switch"> "(" Expr ")" "{" list<SwitchProng> "}" }

//// Assembly.

AsmExpr { kw<"asm"> kw<"volatile">? "(" Expr AsmOutput? ")" }

AsmOutput { ":" list<AsmOutputItem> AsmInput? }

AsmOutputItem { "[" Identifier "]" StringLiteral "(" (("->" TypeExpr) | Identifier) ")" }

AsmInput { ":" list<AsmInputItem> AsmClobbers? }

AsmInputItem { "[" Identifier "]" StringLiteral "(" Expr ")" }

AsmClobbers { ":" list<StringLiteral> }

//// Helper grammar.

BreakLabel { !colonLabel ":" Identifier }

BlockLabel { /*left*/ Identifier !colonLabel ":" }

FieldInit { "." Identifier "=" Expr }

WhileContinueExpr { ":" "(" (AssignExpr | Expr) ")" }

AddrSpace { kw<"addrspace"> "(" Expr ")" }

//// Fn specific.

ParamDeclList { list<ParamDecl> }

ParamDecl {
  DocComment? (kw<"noalias"> | kw<"comptime">)? (Identifier ":")? ParamType
  | "..."
}

ParamType { kw<"anytype"> | TypeExpr }

//// Control flow prefixes

IfPrefix { kw<"if"> "(" Expr ")" PtrPayload? }

WhilePrefix { kw<"while"> "(" Expr ")" PtrPayload? WhileContinueExpr? }

ForPrefix { kw<"for"> "(" ForArgList ")" PtrListPayload }

//// Payloads

Payload { "|" Identifier "|" }

PtrPayload { "|" Star? Identifier "|" }

PtrIndexPayload { "|" "*"? Identifier ("," Identifier)* "|" }

PtrListPayload { "|" "*"? Identifier ("," "*"? Identifier)* ","? "|" }

Star { "*" }

//// Switch specific.

SwitchProng { kw<"inline">? SwitchCase "=>" PtrIndexPayload? SingleAssignExpr }

SwitchCase { SwitchItem ("," SwitchItem)* ","? | kw<"else"> }

SwitchItem { Expr ("..." Expr)? }

//// For specific.

ForArgList { ForItem ("," ForItem)* ","? }

ForItem { Expr (".." Expr?)? }

//// Operators

CompareOp { "==" | "!=" | ">" | "<" | ">=" | "<=" }

AssignOp { "*=" | "*|=" | "/=" | "%=" | "+=" | "+|=" | "-=" | "-|=" | "<<=" | "<<|=" | ">>=" | "&=" | "^=" | "|=" | "*%=" | "+%=" | "-%=" | "=" }

BitwiseOp { "&" | "^" | "|" | kw<"orelse"> | kw<"catch"> Payload? }

BitShiftOp { "<<" | ">>" | "<<|" }

AdditionOp { "+" | "-" | "++" | "+%" | "-%" | "+|" | "-|" }

MultiplyOp { "||" | "*" | arithOp<"/"> | "%" | "**" | "*%" | "*|" }

PrefixOp { "!" | "-" | "~" | "-%" | "&" | kw<"try"> | kw<"await"> }

PrefixTypeOp {
  "?"
  | kw<"anyframe"> "->"
  | SliceTypeStart (ByteAlign | AddrSpace | kw<"const"> | kw<"volatile"> | kw<"allowzero">)*
  | PtrTypeStart (AddrSpace | kw<"align"> "(" Expr (":" Expr ":" Expr)? ")" | kw<"const"> | kw<"volatile"> | kw<"allowzero">)*
  | ArrayTypeStart
}

ArrayAccess { "[" Expr "]" }
Slice { "[" Expr ".." (Expr? (!colonSlice ":" Expr)?)? "]" }
Deref { ".*" }
Unwrap { ".?" }
FieldAccess { "." Identifier }

SuffixOp { Slice | ArrayAccess | FieldAccess | Deref | Unwrap }

FnCallArgs { !fncallargs "(" list<Expr> ")" }

//// Ptr specific.

SliceTypeStart { "[" (":" Expr)? "]" }

PtrTypeStart {
  "*"
  | "**"
  // "...extended tokens allow both meanings to take effect, implicitly enabling GLR when both apply."
  // vs kw<"c">, which turns any c into a keyword (when they may instead be identifiers)
  | "[" "*" (@extend<identifier, "c"> | ":" Expr)? "]"
}

ArrayTypeStart { "[" Expr (":" Expr)? "]" }

//// ContainerDecl specific.

ContainerDeclAuto { ContainerDeclType "{" ContainerDocComment? containerMembers "}" }

ContainerDeclType {
  kw<"struct"> ("(" Expr ")")?
  | kw<"opaque">
  | kw<"enum"> ("(" Expr ")")?
  | kw<"union"> ("(" (kw<"enum"> ("(" Expr ")")? | Expr) ")")?
}

//// Alignment

ByteAlign { kw<"align"> "(" Expr ")" }

////

Identifier { identifier }

BuiltinIdentifier { builtinIdentifier }

StringLiteral { stringLiteralSingle | multiStringLiteral }

StringLiteralSingle { stringLiteralSingle }

@skip { whitespace | LineComment }

kw<term> { @specialize[@name={term}]<identifier, term> }

@tokens {
  whitespace {
    ($[ \t\r\n] | "\r"? "\n")+
  }

  //identifier: ($) => choice(/[A-Za-z_][A-Za-z0-9_]*/, seq("@", $.string_literal)),
  identifier {
    $[A-Za-z_] $[A-Za-z0-9_]*
  }

  builtinIdentifier { "@" $[A-Za-z_] $[A-Za-z0-9_]* }

  Integer {
    "0b" $[01] ("_"? $[01])*
    | "0o" $[0-7] ("_"? $[0-7])*
    | "0x" $[0-9a-fA-F] ("_"? $[0-9a-fA-F])*
    | $[0-9] ("_"? $[0-9])*
  }

  numeric_<regex> { regex ("_"? regex)* }

  Float {
    "0x" numeric_<$[0-9a-fA-F]> "." numeric_<$[0-9a-fA-F]> ($[pP] $[+\-]? numeric_<$[0-9]>)?
    | numeric_<$[0-9]> "." numeric_<$[0-9]> ($[eE] $[+\-]? numeric_<$[0-9]>)?
    | "0x" numeric_<$[0-9a-fA-F]> $[pP] $[+\-]? numeric_<$[0-9]>
    | numeric_<$[0-9]> $[eE] $[+\-]? numeric_<$[0-9]>
  }

  @precedence { Float Integer }

  multiStringLiteral { ("\\\\" ![\n]* $[ \n]*)+ }

  stringEscape {
    "\\n" | "\\r" | "\\t" | "\\\\" | "\\'" | "\\\"" | "\\x" $[0-9a-fA-F] $[0-9a-fA-F]
    | "\\u{" $[0-9a-fA-F] ($[0-9a-fA-F] ($[0-9a-fA-F] ($[0-9a-fA-F] ($[0-9a-fA-F] $[0-9a-fA-F]?)?)?)?)? "}"
  }

  CharLiteral {
    "'"
    ( // charFragment
      !['\\]
      | stringEscape
    )*
    "'"
  }

  stringLiteralSingle {
    "\""
    ( // stringFragment
      !["\\]*
      | stringEscape
    )*
    "\""
  }

  LineComment[isolate] { "//" ("\\" (![\n] | "\\r"? "\\n") | ![\n])* }

  DocComment[isolate] { ("///" (![/\n] ![\n]* $[ \n]*|()))+ }

  containerComment { "//!" ![\n]* $[ \n]* }

  arithOp<expr> { expr }

  @precedence { containerComment, DocComment, LineComment, arithOp }
}

@external propSource highlighting from "./highlight"
